<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>socket.io</title>
    <!-- socket.io cdn -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
       /* [실습2] 채팅창 UI */
        .chat-list{
            background-color: skyblue;
            width:50%;
            height: 500px;
            padding:10px;
            overflow-y:auto;
        }
        .chat-list div{
            margin-top:3px;
        }
        .chat-list div div {
            display: inline-block;
            padding:3px;
        }
        .my-chat{
            text-align: right;
        }
        .my-chat div{
            background-color: yellow;
        }
        .other-chat{
            text-align: left;
        }
        .other-chat div{
            background-color: white;
        }

        /* [실습3] 채팅창 입장 안내 문구 */
        .notice{
            text-align: cneter;
            color:#005397;
            font-size: 12px;
        }
        /* [실습5] */
        .d-none{
            display: none;
        }

        .secret-chat div{
            background-color: pink;
        }
    </style>
</head>
<body>
    <h1>My Chat</h1>

    <!-- [실습1] 각 버튼 누를 때마다 서버로 메세지 보내기 -->
    <!-- <button onclick="sayHello();">Hello</button>
    <button onclick="sayStudy();">Study</button>
    <button onclick="sayBye();">Bye</button>
    <p id="server-result"></p> -->


    <!-- [실습5] -->
    <input placeholder="닉네임을 입력하세요" id="nickname">
    <button type="button" class="join-btn" onclick="join();">입장</button>

    <!-- [실습2] 채팅 ui-->
    <main class="chat-box d-none">
        <div class="chat-list">
            <div class="my-chat">
            </div>
            <div class="other-chat">
            </div>
        </div>
        <!-- form 태그는 enter키를 누르면 submit됨 -->
        <select id="user-list"></select>에게
        <input type="text" id="message" onkeydown="if(window.event.keyCode==13){send();}">
        <button type="button" onclick="send();">전송</button>
    </main>

    <script>
        // 소켓 사용을 위한 객체 생성
        const socket = io.connect();

        socket.on('connect',()=>{
            console.log('클라이언트 연결 완료 >', socket.id);
        });

        // [실습 1]
        /*
        // hello emit
        const sayHello=()=>{
            // 'hello'이벤트를 서버로 전송
            socket.emit('hello',{who:'client', msg:'hello'});
        }

        // helloKR on
        socket.on('helloKR',(data)=>{
            console.log(data);
            document.getElementById('server-result').textContent = `${data.who} : ${data.msg}`;
        })

        // study emit
        const sayStudy=()=>{
            socket.emit('study',{who:'client', msg:'study'});
        }

        // studyKR on
        socket.on('studyKR',(data)=>{
            console.log(data);
            document.getElementById('server-result').textContent = `${data.who} : ${data.msg}`;
        })

        // bye emit
        const sayBye=()=>{
            socket.emit('bye',{who:'client', msg:'bye'});
        }

        // byeKR on
        socket.on('byeKR',(data)=>{
            console.log(data);
            document.getElementById('server-result').textContent = `${data.who} : ${data.msg}`;
        })
        */

        // [실습 3]
        socket.on('notice',(msg)=>{
            document.querySelector('.chat-list').insertAdjacentHTML(`beforeend`,`<div class="notice">${msg}</div>`)
        })


        /*
        1. input으로 메세지 입력, 전송 버튼 클릭, 서버에다 emit 내용을 보내기
        2. (서버) send  이벤트를 받아서 모두에게 newMessage 이벤트로 아이디, 메세지를 보내기
        3. (클라) newMessage이벤트를 받아서, 화면에 내가 보낸 메세지인지 아닌지를 판별해서, class명 지정해서 화면에 보여주기
        */

        // [실습 4] Step 1. 서버에 보내기
        function send(){
            const data={
                dm:document.getElementById('user-list').value,
                id:socket.id,
                msg:document.getElementById('message').value
            }
        
            socket.emit('send',data);
            document.getElementById('message').value=''; // input 초기화
        }


        // [실습 4] Step 2. 서버에서 받아서 보내주기
        socket.on('newMessage',(data)=>{
            // { id: 'Oimlv6jMCAYP826lAAAC', msg: '안녕' }
            /*
                    <div class="chat-list">
                    <div class="my-chat">
                        <div>user1:msg1</div>
                    </div>
                    <div class="other-chat">
                        <div>user2:msg2</div>
                    </div>
                </div>
            */
            const chatList = document.querySelector('.chat-list');
            const div = document.createElement('div')// my chat or other chat;
            const divChat = document.createElement('div') // 안쪽 div

            if(data.id===socket.id){
                // 내가 보낸 메세지
                div.classList.add('my-chat');
            }else{
                // 다른 사람이 보낸 메세지
                div.classList.add('other-chat')
            }

            if(data.dm){
                div.classList.add(`secret-chat`);
                divChat.textContent = data.dm; // `(DM) `
            }
            
            divChat.textContent+=`${data.id} : ${data.msg}`;
            div.append(divChat);
            chatList.append(div);

            // 메세지가 많아져서 스크롤이 생기더라도 하단 고정
            chatList.scrollTop = chatList.scrollHeight;
        })

        // [실습 5] DM
        /* 
            1. 서버에서 id 값들을 보내줄건데, 채팅방에 입장했다, 라고 가정하고 입장 버튼을 만들어줄게요.
            입장 -> 서버측에 join 이벤트를 emit
            2. (서버) join 이벤트를 받아서, 전체 socket id 값을 보내기
            3. (클라) 위의 값을 select 안에 추가 
        */
        function join(){
            socket.emit('setUserList',{id:socket.id});
        }

        // 입장성공 시 입장버튼 비활성화, 채팅창 보이기
        socket.on('entrySuccess',(id)=>{
            // 버튼 비활성화
            document.querySelector('.join-btn').disabled=true;
            // 채팅창 보이기
            document.querySelector('.chat-box').classList.remove('d-none');
        })
   
        // 유저 목록 업데이트 (select 박스의 option 태그 개수 변경)
        socket.on('updateUsers',(userObjs)=>{
            // userObjs: {socket.id : socket.id, ....}
            console.log('userList > ',userObjs);

            let options = `<option value="all">전체</option>`;
        
            // TODO : userObjs 반복 돌아서 option 태그 추가
            // option 태그의 value 값 socket.id 값
            // 객체의 반복
            
            for(let key in userObjs){
                // 본인 제외
                if(key !== socket.id){
                    options+=`<option value=${key}>${key}</option>`;
                }
            }
            document.querySelector('#user-list').innerHTML = options;
        })
   </script>
</body>
</html>